import dedent from 'string-dedent'
import { fromFileUrl } from '@std/path/from-file-url'
import { populateReadme, templateUrl } from '../src/render.ts'
import { debounce } from '@std/async/debounce'
import { BASE_URL } from '../src/config.ts'

const readmePath = './README.md'

// Debounce needed due to https://github.com/denoland/deno/issues/12874
// See also https://github.com/denoland/deno/issues/12874#issuecomment-2904009236
const updateOnChange = debounce(async () => {
	const currentContent = await Deno.readTextFile(readmePath)
	const newContent = dedent`
		<!--
			Do not edit this file directly.
			Auto-populated via
			* Template: ${relative(templateUrl.href)}
			* Script: ${relative(import.meta.url)}
		-->

		${await populateReadme({ seed: 16219948517617292328n, baseUrl: BASE_URL, indent: 4 })}
	`

	if (currentContent !== newContent) {
		await Deno.writeTextFile(readmePath, newContent)
		await new Deno.Command('deno', { args: ['fmt', './README.md'] }).spawn().output()
		console.info('%cREADME.md updated', 'color: fuchsia;')
	}
}, 100)

updateOnChange()

for await (const event of Deno.watchFs(fromFileUrl(templateUrl))) {
	if (event.kind === 'modify') updateOnChange()
}

function relative(path: string) {
	return fromFileUrl(path).replace(Deno.cwd() + '/', '')
}
